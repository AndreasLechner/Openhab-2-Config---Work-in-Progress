import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
 
rule "Scene 1"
when
	Item Scene1 changed
then
	if( Scene1.state == ON )
	{
		Lights_FF.members.forEach(kreis|{
			if(kreis.state!=OFF && kreis.state!=0 && kreis!=Light_FF_Kitchen_Cupboard && kreis!=Light_FF_Kitchen_Bar && kreis!=Socket_Livingroom1)
			{
				sendCommand(kreis, OFF)
			}
		})
		Lights_SF.members.forEach(kreis|{
			if(kreis.state!=OFF && kreis.state!=0)
			{
				sendCommand(kreis, OFF)
			}
		})
		sendCommand(Light_FF_Kitchen_Cupboard, ON)
		sendCommand(Light_FF_Kitchen_Bar, ON)
		sendCommand(Socket_Livingroom1, ON)
		postUpdate(Scene1, OFF)
	}
end

rule "Scene 2"
when
	Item Scene2 changed
then

	if( Scene2.state == ON )
	{
		sendCommand(Light_FF_Floor_Ceiling, ON)
		sendCommand(Light_SF_Bathroom_Ceiling, ON)
		sendCommand(Light_SF_Bathroom_Mirror, ON)
		sendCommand(Light_SF_Bedroom_Ceiling, ON)
		postUpdate(Scene2, OFF)
	}
end

rule "Scene 3"
when
	Item Scene3 changed
then
	if( Scene3.state == ON )
	{
		Lights_FF.members.forEach(kreis|{
			if(kreis.state!=OFF && kreis.state!=0 && kreis!=Light_FF_Floor_Ceiling)
			{
				sendCommand(kreis, OFF)
			}
		})
		Lights_SF.members.forEach(kreis|{
			if(kreis.state!=OFF && kreis.state!=0 && kreis!=Light_SF_Bathroom_Mirror && kreis!=Light_SF_Bedroom_Right)
			{
				sendCommand(kreis, OFF)
			}
		})
		sendCommand(Light_FF_Floor_Ceiling, ON)
		sendCommand(Light_SF_Bathroom_Mirror, ON)
		sendCommand(Light_SF_Bedroom_Right, ON)
		sendCommand(Socket_Bassbox, OFF)
		postUpdate(Scene3, OFF)
	}
end
